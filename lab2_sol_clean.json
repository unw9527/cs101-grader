{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "exp(0) =  1.0\n"
        },
        {
          "data": {
            "text/plain": "float"
          },
          "execution_count": 1,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": "from math import exp  # include a library function for the exponential\nprint('exp(0) = ', exp(0))\ntype(exp(0))"
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {"question": ["Q1", 5]},
      "outputs": [
        {
          "data": {
            "text/plain": "float"
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": "############ 10 points for submission to RELATE [5]\n###########  and email to TA [5] with proper filename.\n###########  If late, take 20% off the final total % \n#############################\n\n###########################################################\n############ 5 points ##############################################\n###############################################################\n\n# store the result in the variable T and find T's data type\nT = int(exp(abs(-2)) + abs(-1.5)) // 4.5 # your code here\ntype(T)"
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {"question": ["Q2", 5]},
      "outputs": [
        {
          "data": {
            "text/plain": "int"
          },
          "execution_count": 3,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": "###########################################\n############### 5 points ##################\n###########################################\n\n# store the result in the variable S and find S's data type\nS = abs(int(1.5e4)) # your code here\ntype(S)"
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {"question": ["Q3", 5]},
      "outputs": [
        {
          "data": {
            "text/plain": "William Shakespeare's play - The Merchant of Venice"
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": "############################################\n############### 5 points ###################\n############################################\n\n\"William Shakespeare's play - The Merchant of Venice\""
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "question": ["Q4", 5]
      },
      "outputs": [
        {
          "data": {
            "text/plain": "This is a straight double quote, \", while these are curly double quotes: \u201c, \u201d."
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": "############################################\n############### 5 points ###################\n############################################\n\n'This is a straight double quote, \", while these are curly double quotes: \u201c, \u201d.'"
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {"question": ["Q5", 5]},
      "outputs": [
        {
          "data": {
            "text/plain": "\"Are we finishing yet? asked an impatient ZJUI\\'s student\""
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": "############################################\n############### 5 points ###################\n############################################\n\n'''\"Are we finishing yet? asked an impatient ZJUI's student\"'''"
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [],
      "source": "##########################################################################################\n############### 20 points; 5 for a, 5 for v, 10 for t  ###################################\n##########################################################################################\n\n# modify this code\n# the base equation is:\n# d = v*t + 0.5*a*t*t\nv = 5.0\na = -9.8\nt = 10.0\n\n# Correct below to include the variables:\nd = 5.0*10.0 + 0.5*-9.8*10.0**2\nd = v*t + 0.5*a*t**2"
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "question": ["Q6", 20]
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "Success!\n"
        }
      ],
      "source": "# it should pass this test---do NOT edit this cell\nfrom numpy import isclose\nassert isclose(d, -440)\nprint('Success!')"
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [],
      "source": "############################################\n############### 5 points ###################\n############################################\n\n# your answer here as the variable ans,\nans = 7"
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {},
      "outputs": [],
      "source": "############################################\n############### 5 points ###################\n############################################\na = \"You're not fully clean till you're Zestfully clean.\"\n# your answer here as a variable ans\nans = a[-8] #Just -8 is ok\n# ans"
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {},
      "outputs": [],
      "source": "# definition\nshowoff = 'sesquipedalian antinominalism'"
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "question": ["Q9", 5]
      },
      "outputs": [
        {
          "data": {
            "text/plain": "'ssupdla nioiaim'"
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": "############################################\n############### 5 points ###################\n############################################\n\n# your answer here\n#showoff[ ??? ]\nshowoff[0::2] #just 0::2 is ok"
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {},
      "outputs": [],
      "source": "import math"
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "deletable": false,
        "editable": false,
        "nbgrader": {
          "checksum": "119863c24821f78cd33ea8c4ca03c97a",
          "grade": false,
          "grade_id": "form-vars",
          "locked": true,
          "schema_version": 1,
          "solution": false
        }
      },
      "outputs": [],
      "source": "# these are representative values\u2014don't change these\nm = 2\nn = 3"
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "deletable": false,
        "nbgrader": {
          "checksum": "721ede83878edaf3245e2acfb05d0002",
          "grade": false,
          "grade_id": "form",
          "locked": false,
          "schema_version": 1,
          "solution": true
        }
      },
      "outputs": [],
      "source": "#################################################################################\n############### 10 points, 5 for numerator, 5 for denominator ###################\n#################################################################################\n\n# write your expression here\nexpr = math.factorial(m+n)/(m+1)/math.factorial(n-1)# your code here"
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "question": ["Q10", 10]
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "Success!\n"
        }
      ],
      "source": "# it should pass this test---do NOT edit this cell\nfrom numpy import isclose\nassert isclose(expr, 20.0)\nprint('Success!')"
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {},
      "outputs": [],
      "source": "from math import asin  # arcsine"
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "deletable": false,
        "nbgrader": {
          "checksum": "8820498e32df89d3a2282e2f150f7cbd",
          "grade": false,
          "grade_id": "import",
          "locked": false,
          "schema_version": 1,
          "solution": true
        }
      },
      "outputs": [],
      "source": "############################################\n############### 5 points ###################\n############################################\n\n# write your expression here\nfrom math import log10\n"
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "question": ["Q11", 5]
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "Success!\n"
        }
      ],
      "source": "# it should pass this test---do NOT edit this cell\nfrom numpy import isclose\ntry:\n    log10(0.25)\nexcept NameError:\n    raise AssertionError('log10 not imported yet')\nprint('Success!')"
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "deletable": false,
        "nbgrader": {
          "checksum": "f1f5df57bcf733d41c2ffff17202469a",
          "grade": false,
          "grade_id": "pend",
          "locked": false,
          "schema_version": 1,
          "solution": true
        }
      },
      "outputs": [],
      "source": "from math import pi\nL = 0.72  # m\ng = 9.8   # acceleration due to gravity."
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {},
      "outputs": [],
      "source": "########################################################################\n############### 15 points, 5 for pi, 5 for L, 5 for g ###################\n########################################################################\n\n# write a formula for T here, using pi from the math library\n# you can also use \"from math import sqrt\" if you like, or use **0.5 as an equivalent\nT = 2*pi*(L/g)**0.5"
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "question": ["Q12", 15]
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "Success!\n"
        }
      ],
      "source": "# it should pass this test---do NOT edit this cell\nfrom numpy import isclose\nassert isclose(T, 1.70307)\nprint('Success!')"
    }
  ],
  "metadata": {
    "anaconda-cloud": {},
    "celltoolbar": "Edit Metadata",
    "kernelspec": {
      "display_name": "Python 3.7.13 ('deeplearning')",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.13"
    },
    "vscode": {
      "interpreter": {
        "hash": "c65d97aa28803afe8a2483e7709cf7751c6446c62982589ae4da6cb2f06943b6"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}